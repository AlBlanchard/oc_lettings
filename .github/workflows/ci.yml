name: CI/CD - Tests et déploiement

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      # Récupère le code
      - name: Checkout du code
        uses: actions/checkout@v3

      # Configure python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # Installe les dep
      - name: Installer dépendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 coverage pytest pytest-django

      # Linting
      - name: Lint avec flake8
        run: |
          flake8 .

      # Tests unitaires et coverage
      - name: Lancer les tests
        run: |
          coverage run -m pytest
          coverage report --fail-under=80

  deploy:
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Build et push Docker image
        run: |
          COMMIT_HASH=$(echo $GITHUB_SHA | cut -c1-7)
          echo "Commit hash utilisé : $COMMIT_HASH"

          docker build -t oc_lettings .
          docker tag oc_lettings alblanchard/oc-lettings:latest
          docker tag oc_lettings alblanchard/oc-lettings:$COMMIT_HASH

          echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          docker push alblanchard/oc-lettings:latest
          docker push alblanchard/oc-lettings:$COMMIT_HASH

          echo "Image disponible sur DockerHub :"
          echo "docker pull alblanchard/oc-lettings:latest"
          echo "docker pull alblanchard/oc-lettings:$COMMIT_HASH"

      - name: Deploiement Render
        run: |
          curl -X GET ${{ secrets.RENDER_URL }}
